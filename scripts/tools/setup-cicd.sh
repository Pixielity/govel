#!/bin/bash

##
# üöÄ GoVel Framework - Complete CI/CD Setup Script
#
# This master script orchestrates the complete setup of GitHub Actions CI/CD
# pipeline for the GoVel framework. It runs both the main workflow generator
# and configuration file generator in the correct sequence.
#
# Features:
# - üéØ Complete CI/CD pipeline setup
# - üìÑ GitHub Actions workflows 
# - üîß Development configurations
# - ü§ñ Automated dependency management
# - üîí Security scanning setup
# - üõ†Ô∏è Build automation
# - üìä Code quality gates
#
# Usage:
#   ./setup-cicd.sh [options]
#
# Options:
#   --dry-run, -d     Show what would be created without creating files
#   --help, -h        Show this help message  
#   --verbose, -v     Enable verbose output
#   --force, -f       Overwrite existing files without confirmation
#   --workflows-only  Only generate GitHub workflows (skip configs)
#   --configs-only    Only generate configuration files (skip workflows)
#
# Examples:
#   ./setup-cicd.sh --dry-run       # Preview complete setup
#   ./setup-cicd.sh                 # Interactive setup with confirmations
#   ./setup-cicd.sh --force         # Overwrite existing files
#   ./setup-cicd.sh --workflows-only # Only GitHub workflows
#
# Author: GoVel Framework Team
# Version: 1.0.0
# License: MIT
##

set -euo pipefail

# üé® Color definitions for beautiful output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# üìù Script configuration
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "$SCRIPT_DIR" && pwd)"

# üîß Default settings
DRY_RUN=false
VERBOSE=false
FORCE=false
WORKFLOWS_ONLY=false
CONFIGS_ONLY=false

##
# üìù Print formatted message with emoji and color support
##
print_message() {
    local type="$1"
    local message="$2"
    local emoji="${3:-}"
    
    case "$type" in
        "info")
            echo -e "${BLUE}${emoji:-‚ÑπÔ∏è}  INFO:${NC} $message"
            ;;
        "success")
            echo -e "${GREEN}${emoji:-‚úÖ} SUCCESS:${NC} $message"
            ;;
        "warning")
            echo -e "${YELLOW}${emoji:-‚ö†Ô∏è}  WARNING:${NC} $message"
            ;;
        "error")
            echo -e "${RED}${emoji:-‚ùå} ERROR:${NC} $message" >&2
            ;;
        "debug")
            if [[ "$VERBOSE" == "true" ]]; then
                echo -e "${PURPLE}${emoji:-üîç} DEBUG:${NC} $message"
            fi
            ;;
        "header")
            echo -e "\n${BOLD}${CYAN}${emoji:-üöÄ} $message${NC}"
            echo -e "${CYAN}$(printf '=%.0s' {1..50})${NC}"
            ;;
    esac
}

##
# üõ†Ô∏è Display help information
##
show_help() {
    cat << EOF
${BOLD}${CYAN}üöÄ GoVel Complete CI/CD Setup${NC}

${BOLD}DESCRIPTION:${NC}
    Complete CI/CD pipeline setup for the GoVel framework.
    Generates GitHub Actions workflows, configuration files, and automation scripts.

${BOLD}USAGE:${NC}
    $SCRIPT_NAME [OPTIONS]

${BOLD}OPTIONS:${NC}
    -d, --dry-run         üîç Show what would be created without creating files
    -v, --verbose         üìù Enable detailed output and debug information
    -f, --force           üí™ Overwrite existing files without confirmation
    -h, --help            ‚ùì Show this help message and exit
    --workflows-only      ‚öôÔ∏è Only generate GitHub Actions workflows
    --configs-only        üîß Only generate configuration files

${BOLD}EXAMPLES:${NC}
    $SCRIPT_NAME --dry-run           # Preview complete setup
    $SCRIPT_NAME                     # Interactive setup with confirmations
    $SCRIPT_NAME --force --verbose   # Force setup with detailed output
    $SCRIPT_NAME --workflows-only    # Only GitHub workflows

${BOLD}WHAT GETS CREATED:${NC}

üìÅ GitHub Actions Workflows:
    üéØ ci.yml                    # Main CI pipeline
    üîí security.yml             # Security scanning
    ü§ñ dependency-update.yml    # Automated dependency updates

üìÅ Configuration Files:
    üîß .golangci.yml             # Comprehensive linting
    üìä .codecov.yml              # Code coverage reporting
    ü§ñ .github/dependabot.yml   # Dependency automation
    üõ†Ô∏è Makefile                 # Build automation

${BOLD}FEATURES:${NC}
    ‚úÖ Multi-version Go testing (1.21, 1.22, 1.23)
    ‚úÖ Cross-platform testing (Linux, macOS, Windows)
    ‚úÖ Smart package change detection
    ‚úÖ Comprehensive security scanning
    ‚úÖ Automated dependency updates
    ‚úÖ Code coverage with quality gates
    ‚úÖ 50+ linting rules
    ‚úÖ Build automation with Makefile
    ‚úÖ Professional development workflow

EOF
}

##
# üéØ Parse command line arguments
##
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--dry-run)
                DRY_RUN=true
                print_message "info" "Dry-run mode enabled - no files will be created" "üîç"
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                print_message "info" "Verbose mode enabled" "üìù"
                shift
                ;;
            -f|--force)
                FORCE=true
                print_message "info" "Force mode enabled - existing files will be overwritten" "üí™"
                shift
                ;;
            --workflows-only)
                WORKFLOWS_ONLY=true
                print_message "info" "Workflows-only mode - skipping configuration files" "‚öôÔ∏è"
                shift
                ;;
            --configs-only)
                CONFIGS_ONLY=true
                print_message "info" "Configs-only mode - skipping workflows" "üîß"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                print_message "error" "Unknown option: $1"
                print_message "info" "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    # Validate conflicting options
    if [[ "$WORKFLOWS_ONLY" == "true" && "$CONFIGS_ONLY" == "true" ]]; then
        print_message "error" "Cannot use --workflows-only and --configs-only together"
        exit 1
    fi
}

##
# üîç Check prerequisites
##
check_prerequisites() {
    print_message "header" "Checking Prerequisites" "üîç"
    
    # Check if we're in a Git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        print_message "warning" "Not in a Git repository - GitHub workflows may not work properly" "‚ö†Ô∏è"
    else
        print_message "success" "Git repository detected" "‚úÖ"
    fi
    
    # Check Go installation
    if command -v go >/dev/null 2>&1; then
        local go_version=$(go version | awk '{print $3}' | sed 's/go//')
        print_message "success" "Go $go_version detected" "‚úÖ"
    else
        print_message "warning" "Go not installed - required for development workflow" "‚ö†Ô∏è"
    fi
    
    # Check if required scripts exist
    local workflow_script="$PROJECT_ROOT/generate-cicd.sh"
    local config_script="$PROJECT_ROOT/generate-cicd-configs.sh"
    
    if [[ ! -f "$workflow_script" ]]; then
        print_message "error" "Workflow generator script not found: $workflow_script" "‚ùå"
        exit 1
    fi
    
    if [[ ! -f "$config_script" ]]; then
        print_message "error" "Configuration generator script not found: $config_script" "‚ùå"
        exit 1
    fi
    
    # Check script permissions
    if [[ ! -x "$workflow_script" ]]; then
        print_message "info" "Making workflow script executable" "üîß"
        chmod +x "$workflow_script"
    fi
    
    if [[ ! -x "$config_script" ]]; then
        print_message "info" "Making configuration script executable" "üîß"
        chmod +x "$config_script"
    fi
    
    print_message "success" "All prerequisites checked" "‚úÖ"
}

##
# ‚öôÔ∏è Generate GitHub Actions workflows
##
generate_workflows() {
    if [[ "$CONFIGS_ONLY" == "true" ]]; then
        print_message "info" "Skipping workflows (configs-only mode)" "‚è©"
        return 0
    fi
    
    print_message "header" "Generating GitHub Actions Workflows" "‚öôÔ∏è"
    
    local args=()
    
    if [[ "$DRY_RUN" == "true" ]]; then
        args+=("--dry-run")
    fi
    
    if [[ "$VERBOSE" == "true" ]]; then
        args+=("--verbose")
    fi
    
    if [[ "$FORCE" == "true" ]]; then
        args+=("--force")
    fi
    
    # Run the workflow generator
    print_message "info" "Executing workflow generator..." "üîÑ"
    if [[ ${#args[@]} -eq 0 ]]; then
        if "$PROJECT_ROOT/generate-cicd.sh"; then
            print_message "success" "GitHub Actions workflows generated successfully" "‚úÖ"
        else
            print_message "error" "Failed to generate GitHub Actions workflows" "‚ùå"
            exit 1
        fi
    else
        if "$PROJECT_ROOT/generate-cicd.sh" "${args[@]}"; then
            print_message "success" "GitHub Actions workflows generated successfully" "‚úÖ"
        else
            print_message "error" "Failed to generate GitHub Actions workflows" "‚ùå"
            exit 1
        fi
    fi
}

##
# üîß Generate configuration files
##
generate_configs() {
    if [[ "$WORKFLOWS_ONLY" == "true" ]]; then
        print_message "info" "Skipping configuration files (workflows-only mode)" "‚è©"
        return 0
    fi
    
    print_message "header" "Generating Configuration Files" "üîß"
    
    local args=()
    
    if [[ "$DRY_RUN" == "true" ]]; then
        args+=("--dry-run")
    fi
    
    if [[ "$VERBOSE" == "true" ]]; then
        args+=("--verbose")
    fi
    
    if [[ "$FORCE" == "true" ]]; then
        args+=("--force")
    fi
    
    # Run the configuration generator
    print_message "info" "Executing configuration generator..." "üîÑ"
    if [[ ${#args[@]} -eq 0 ]]; then
        if "$PROJECT_ROOT/generate-cicd-configs.sh"; then
            print_message "success" "Configuration files generated successfully" "‚úÖ"
        else
            print_message "error" "Failed to generate configuration files" "‚ùå"
            exit 1
        fi
    else
        if "$PROJECT_ROOT/generate-cicd-configs.sh" "${args[@]}"; then
            print_message "success" "Configuration files generated successfully" "‚úÖ"
        else
            print_message "error" "Failed to generate configuration files" "‚ùå"
            exit 1
        fi
    fi
}

##
# üìã Display final summary
##
show_final_summary() {
    print_message "header" "Setup Complete" "üéâ"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        print_message "success" "Dry run completed - no files were created" "‚úÖ"
        print_message "info" "Run without --dry-run to create the files"
        return 0
    fi
    
    echo ""
    echo -e "${BOLD}üìã Files Created:${NC}"
    
    if [[ "$CONFIGS_ONLY" != "true" ]]; then
        echo -e "  ${CYAN}GitHub Actions Workflows:${NC}"
        echo "    üìÑ .github/workflows/ci.yml"
        echo "    üìÑ .github/workflows/security.yml" 
        echo "    üìÑ .github/workflows/dependency-update.yml"
        echo ""
    fi
    
    if [[ "$WORKFLOWS_ONLY" != "true" ]]; then
        echo -e "  ${CYAN}Configuration Files:${NC}"
        echo "    üìÑ .golangci.yml"
        echo "    üìÑ .codecov.yml"
        echo "    üìÑ .github/dependabot.yml"
        echo "    üìÑ Makefile"
        echo ""
    fi
    
    echo -e "${BOLD}üöÄ Next Steps:${NC}"
    echo "  1. üìù Review the generated files"
    echo "  2. üîß Customize configurations as needed"
    echo "  3. üõ†Ô∏è Run 'make dev-setup' to install development tools"
    echo "  4. üß™ Run 'make test' to verify everything works"
    echo "  5. üì§ Commit and push the changes to GitHub"
    echo "  6. ‚úÖ Enable GitHub Actions in your repository settings"
    echo ""
    
    echo -e "${BOLD}üìö Useful Commands:${NC}"
    echo "  make help          # Show all available targets"
    echo "  make build         # Build all packages"
    echo "  make test          # Run tests with coverage"
    echo "  make lint          # Run code linting"
    echo "  make security      # Run security scans"
    echo "  make all           # Complete build pipeline"
    echo ""
    
    print_message "success" "GoVel CI/CD setup completed successfully!" "üéâ"
}

##
# üéØ Show setup preview
##
show_setup_preview() {
    print_message "header" "Setup Preview" "üîç"
    
    echo ""
    echo -e "${BOLD}The following will be created:${NC}"
    echo ""
    
    if [[ "$CONFIGS_ONLY" != "true" ]]; then
        echo -e "${CYAN}üìÅ GitHub Actions Workflows:${NC}"
        echo "  ‚îú‚îÄ‚îÄ üéØ ci.yml                    # Main CI pipeline with testing"
        echo "  ‚îú‚îÄ‚îÄ üîí security.yml             # Security scanning (gosec, govulncheck)"
        echo "  ‚îî‚îÄ‚îÄ ü§ñ dependency-update.yml    # Automated dependency updates"
        echo ""
    fi
    
    if [[ "$WORKFLOWS_ONLY" != "true" ]]; then
        echo -e "${CYAN}üìÅ Configuration Files:${NC}"
        echo "  ‚îú‚îÄ‚îÄ üîß .golangci.yml             # 50+ linting rules"
        echo "  ‚îú‚îÄ‚îÄ üìä .codecov.yml              # Coverage reporting & gates"
        echo "  ‚îú‚îÄ‚îÄ ü§ñ .github/dependabot.yml   # Weekly dependency updates"
        echo "  ‚îî‚îÄ‚îÄ üõ†Ô∏è Makefile                  # Build automation (help, build, test, etc.)"
        echo ""
    fi
    
    echo -e "${BOLD}‚ú® Features Included:${NC}"
    echo "  ‚Ä¢ üß™ Multi-version Go testing (1.21, 1.22, 1.23)"
    echo "  ‚Ä¢ üñ•Ô∏è Cross-platform testing (Linux, macOS, Windows)"
    echo "  ‚Ä¢ üì¶ Smart package change detection"
    echo "  ‚Ä¢ üîí Comprehensive security scanning"
    echo "  ‚Ä¢ üìä Code coverage with quality gates (80% threshold)"
    echo "  ‚Ä¢ üé® Code formatting and linting"
    echo "  ‚Ä¢ ü§ñ Automated dependency management"
    echo "  ‚Ä¢ üöÄ Professional development workflow"
    echo ""
}

##
# üèÅ Main execution function
##
main() {
    print_message "header" "GoVel CI/CD Complete Setup" "üöÄ"
    print_message "info" "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
    print_message "info" "Project root: $PROJECT_ROOT"
    
    # Parse arguments
    parse_arguments "$@"
    
    # Check prerequisites
    check_prerequisites
    
    # Show setup preview
    show_setup_preview
    
    # Confirm with user unless force mode
    if [[ "$FORCE" != "true" && "$DRY_RUN" != "true" ]]; then
        echo ""
        echo -e "${YELLOW}‚ùì Do you want to proceed with the CI/CD setup? [y/N]:${NC} "
        read -r response
        
        case "$response" in
            [yY][eE][sS]|[yY])
                print_message "success" "Proceeding with setup..." "‚úÖ"
                ;;
            *)
                print_message "info" "Setup cancelled by user" "üö´"
                exit 0
                ;;
        esac
    fi
    
    # Generate workflows
    generate_workflows
    
    # Generate configuration files  
    generate_configs
    
    # Show final summary
    show_final_summary
}

# üèÅ Script entry point
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi