version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: service-provider-postgres
    environment:
      POSTGRES_DB: example_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - service-provider-network

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: service-provider-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - service-provider-network

  # Redis Sentinel (for HA testing)
  redis-sentinel:
    image: redis:6-alpine
    container_name: service-provider-redis-sentinel
    depends_on:
      - redis
    ports:
      - "26379:26379"
    command: |
      sh -c "
      echo 'port 26379
      sentinel monitor mymaster redis 6379 1
      sentinel down-after-milliseconds mymaster 5000
      sentinel failover-timeout mymaster 10000
      sentinel parallel-syncs mymaster 1' > /etc/redis-sentinel.conf &&
      redis-sentinel /etc/redis-sentinel.conf
      "
    networks:
      - service-provider-network

  # Application (optional - for Docker development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: service-provider-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      APP_DATABASE_HOST: postgres
      APP_REDIS_HOST: redis
      APP_ENVIRONMENT: development
      APP_DEBUG: true
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics port
    volumes:
      - .:/app
    networks:
      - service-provider-network
    profiles:
      - with-app

volumes:
  postgres_data:
  redis_data:

networks:
  service-provider-network:
    driver: bridge
